text = "最近的android产品研发系列主要讲解的是android产品研发过程中涉及到的技术，技巧，实践等。前面我们讲解了android源码系列的文章  可参考：Android源码解析-->总结（持续更新中），源码系列的文章东西比较多比较复杂，并且一些东西还没有讲完，这里已经更新了30篇了，后续的东西一定会更新的。考虑一直讲源码系列可能看的比较累，这里就有了产品研发系列的文章。本个系列的文章主要是讲解android产品研发过程中一些需要注意的技术技巧与实践。其主要面对产品研发，对App稳定性，友好型，兼容性要求较高的App。\n" +
                    "\n" +
                    "下面就是我准备讲解的一些产品研发系列的内容： （其中超链接字体的文章是我已经写完的部分，其他的是我还没写但是打算写的东西，这些东西大概覆盖了android产品研发过程中涉及到的各个方面，当然了有可能后续也会有所补充）\n" +
                    "\n" +
                    "\n" +
                    "Android产品研发（一）-->实用开发规范\n" +
                    "\n" +
                    "本文中选择将开发规范作为这个系列的第一篇文章，就是个人感觉产品研发过程中，开发规范真的很重要，很重要，非常重要（重要的事情说三遍），一个好的开发规范可以让团队中的人对他人的代码更熟悉，新人也可以更好的了解产品的业务逻辑。开发规范并不是一个死的一成不变的，每个团队可能都有自己的开发规范，只要是适合团队的开发规范就是最好的开发规范...\n" +
                    "\n" +
                    "Android产品研发（二）-->启动页优化\n" +
                    "\n" +
                    "这篇文章中我们主要介绍一下启动页的优化，关于启动页的优化是UE方面的内容了，一个很慢的启动页很容易让用户觉得受不了，进而“逃离”App的，所以若想产品有更好的用户体验，做一些启动页的优化是一个不错的选择。这里我们简单介绍一下我在实践中对启动页是如何优化的...\n" +
                    "\n" +
                    "Android产品研发（三）-->基类Activity\n" +
                    "\n" +
                    "在实际的android产品研发中，一般的我们在写Activity的时候都会继承于一个基类Activity，该Activity是所有的Activity的基类。在该基类中我们主要用于重写一些共有的逻辑。好处是显而易见的对于一些Activity的共有逻辑我们不必要在每个Activity中都重新写一遍，只需要在基类Activity中写一遍就好了...\n" +
                    "\n" +
                    "Android产品研发（四）-->减小Apk大小\n" +
                    "\n" +
                    "随着移动技术的深入发展，各种炫酷效果的更新，在我们追求UI与UE的同时一个不如忽视的问题逐渐暴露出来，那就是apk文件越来越大，可能有的童鞋会说现在都是wifi环境，apk文件增大几M不是什么大不了的问题，这其实也是有一定道理的，但是作为开发人员的我们这绝不是我们认为可以忽略这个问题的理由。优化Apk大小也是优化我们App体验的一个重要方面，虽然可能它不是那么的重要...\n" +
                    "\n" +
                    "Android产品研发（五）-->多渠道打包\n" +
                    "\n" +
                    "国内的Android开发者还是很苦逼的，由于众所周知的原因，google play无法在国内打开（翻墙的就不在考虑之内了），所以android系的应用市场，群雄争霸。后果就是国内存在着有众多的应用市场，产品在不同的渠道可能有这不同的统计需求，为此android开发人员需要为每个应用市场发布一个安装包，这里就引出了android的多渠道打包...\n" +
                    "\n" +
                    "Android产品研发（六）-->Apk混淆\n" +
                    "\n" +
                    "本文主要讲解Apk的混淆，这里的混淆分为两种代码混淆和资源文件混淆。实际的产品研发中为了防止自己的劳动成果被别人窃取，混淆代码能有效防止apk文件被反编译，进而查看源代码。说来惭愧，作为互联网创业公司的我们也确实对竞品Apk反编译研究过，如果Apk混淆之后确实对理解源码的业务流程造成了困扰，这也从侧面说明了Apk混淆的重要性...\n" +
                    "\n" +
                    "Android产品研发（七）-->Apk热修复\n" +
                    "\n" +
                    "去年一整年android社区中刮过了一阵热修复的风，各大厂商，逼格大牛纷纷开源了热修复框架，恩，产品过程中怎么可能没有bug呢？重新打包上线？成本太高用户体验也不好，咋办？上热修复呗。好吧，既然要开始上热修复的功能，那么就得调研一下热修复的原理。下面我将分别讲述一下热修复的原理，各大热修复框架的比较，以及自身产品中热修复功能的实践\n" +
                    "\n" +
                    "Android产品研发（八）-->App数据统计\n" +
                    "\n" +
                    "文本将要介绍一下android产品中另一项基础功能-数据统计。App数据统计的意义在于通过统计用户的行为方式有针对性的更新展示算法，根据用户的行为习惯更新产品功能等等，具体而言当我们开发好App后就会把它发到应用市场上，但是目前有很多的应用市场(如，豌豆荚，应用宝，安卓市场等)，那么问题来了，假如我们想统计我们开发的应用的下载次数，就必须使用统计吧，而且它不仅可以统计我们的应用的下载量，启动次数，还可以统计页面访问量、查看程序的bug等等，所以相对于项目而言产品由于存在着持续的迭代与用户体验，所以做好数据统计工作是一项必不可少的工作...\n" +
                    "\n" +
                    "Android产品研发（九）-->App网络传输协议\n" +
                    "\n" +
                    "本文将要介绍的是App的网络传输协议。App与服务器交互就会涉及到信息的交换，而信息的交互就必然需要一套完整的数据协议。这里首先需要明确一点的是什么是网络传输协议呢？这里首先套用一段百度百科的定义...\n" +
                    "\n" +
                    "Android产品研发（十）-->不使用静态变量保存数据\n" +
                    "\n" +
                    "本文讲解的其实并不是一个技术方面，而是一个android产品研发过程中的技巧：尽量不使用静态变量保存核心数据。这是为什么呢？这是因为android系统中的应用进程并不是安全的，包括application对象、静态变量在内的进程级别变量并不会一直呆着内存里面，它会被kill掉，它真的有可能会被kill掉，真的真的，重要的事情说三遍。与大家普遍的看法不同之处在于，当进程被干掉之后，实际上app不会重新开始启动。Android系统会创建一个新的Application对象，然后启动上次用户离开时的activity以造成这个app从来没有被kill掉得假象。而这时候静态变量等数据由于进程已经被杀死而被初始化，所以就有了我们的不推荐在静态变量（包括Application中保存全局数据静态数据）的观点...\n" +
                    "\n" +
                    "Android产品研发（十一）-->使用scheme实现页面跳转\n" +
                    "\n" +
                    "本文讲解的是一种App内页面跳转协议，这里的跳转包括应用内跳转、H5与Native跳转，服务器通知客户端如何跳转等。在讲解应用内跳转协议之前我们先讲解一下H5与Native相互跳转的相关知识点...\n" +
                    "\n" +
                    "Android产品研发（十二）-->App长连接实现\n" +
                    "\n" +
                    "本文中我们将讲解一下App的长连接实现。一般而言长连接已经是App的标配了，推送功能的实现基础就是长连接，当然了我们也可以通过轮训操作实现推送功能，但是轮训一般及时性比较差，而且网络消耗与电量销毁比较多，因此一般推送功能都是通过长连接实现的...";

        }